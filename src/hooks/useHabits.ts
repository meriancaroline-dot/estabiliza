// src/hooks/useHabits.ts
// -------------------------------------------------------------
// Hook de h√°bitos com seed inicial + streak di√°rio confi√°vel
// -------------------------------------------------------------

import { useCallback, useEffect, useState } from 'react';
import { useStorage } from './useStorage';
import { Habit } from '@/types/models';
import { Alert } from 'react-native';
import { v4 as uuidv4 } from 'uuid';

// -------------------------------------------------------------
// H√°bitos padr√£o (seed) ‚Äî carregados se n√£o houver nada salvo
// Tipagem igual ao addHabit: Omit<Habit, 'id' | 'streak' | 'lastCompleted'>
// -------------------------------------------------------------
const SEED_HABITS: Array<Omit<Habit, 'id' | 'streak' | 'lastCompleted'>> = [
  {
    title: 'Dormir 6h ou mais por dia',
    description: 'Sono restaurador para estabilidade emocional.',
    frequency: 'daily',
  },
  {
    title: 'Exposi√ß√£o de 30 minutos ao sol',
    description: 'Luz natural regula o ciclo circadiano e melhora o humor.',
    frequency: 'daily',
  },
  {
    title: 'Tomar medica√ß√£o',
    description: 'Seguir o tratamento conforme orienta√ß√£o profissional.',
    frequency: 'daily',
  },
  {
    title: 'Beber ao menos 2L de √°gua',
    description: 'Hidrata√ß√£o adequada melhora concentra√ß√£o e energia.',
    frequency: 'daily',
  },
  {
    title: 'Fazer 3 refei√ß√µes',
    description: 'Alimenta√ß√£o regular mant√©m equil√≠brio de energia e humor.',
    frequency: 'daily',
  },
  {
    title: 'Reduzir o tempo de tela',
    description: 'Evitar est√≠mulos excessivos e melhorar a qualidade do sono.',
    frequency: 'daily',
  },
  {
    title: 'Atividade f√≠sica',
    description: 'Mover o corpo regularmente ajuda o humor.',
    frequency: 'daily',
  },
];

// Util para ‚Äúzerar‚Äù hora e comparar dias
function startOfDay(d: Date) {
  const x = new Date(d);
  x.setHours(0, 0, 0, 0);
  return x;
}
const MS_DAY = 1000 * 60 * 60 * 24;

// -------------------------------------------------------------
// Hook principal
// -------------------------------------------------------------
export function useHabits() {
  const {
    value: habits,
    setValue: setHabits,
    save: saveHabits,
    load: loadHabits,
  } = useStorage<Habit[]>({
    key: 'habits',
    initialValue: [],
  });

  const [loading, setLoading] = useState(true);

  // -----------------------------------------------------------
  // Carregar h√°bitos + seed inicial
  // -----------------------------------------------------------
  useEffect(() => {
    (async () => {
      await loadHabits();
      setLoading(false);
    })();
  }, [loadHabits]);

  // Se n√£o houver h√°bitos salvos, semeia os padr√µes uma √∫nica vez
  useEffect(() => {
    (async () => {
      if (!loading && habits.length === 0) {
        const seeded: Habit[] = SEED_HABITS.map((h) => ({
          ...h,
          id: uuidv4(),
          streak: 0,
          lastCompleted: undefined,
        }));
        setHabits(seeded);
        await saveHabits(seeded);
        // console.log('üå± H√°bitos padr√£o criados.');
      }
    })();
  }, [loading, habits.length, setHabits, saveHabits]);

  // -----------------------------------------------------------
  // Criar h√°bito
  // -----------------------------------------------------------
  const addHabit = useCallback(
    async (data: Omit<Habit, 'id' | 'streak' | 'lastCompleted'>) => {
      try {
        const newHabit: Habit = {
          ...data,
          id: uuidv4(),
          streak: 0,
          lastCompleted: undefined,
        };

        const updated = [...habits, newHabit];
        setHabits(updated);
        await saveHabits(updated);
        // console.log('‚úÖ H√°bito criado:', newHabit.title);
      } catch (e) {
        console.error('Erro ao adicionar h√°bito:', e);
        Alert.alert('Erro', 'N√£o foi poss√≠vel criar o h√°bito.');
      }
    },
    [habits, setHabits, saveHabits],
  );

  // -----------------------------------------------------------
  // Atualizar h√°bito
  // -----------------------------------------------------------
  const updateHabit = useCallback(
    async (id: string, updates: Partial<Habit>) => {
      try {
        const updatedList = habits.map((h) =>
          h.id === id ? { ...h, ...updates } : h,
        );
        setHabits(updatedList);
        await saveHabits(updatedList);
        // console.log('‚úèÔ∏è H√°bito atualizado:', id);
      } catch (e) {
        console.error('Erro ao atualizar h√°bito:', e);
        Alert.alert('Erro', 'N√£o foi poss√≠vel atualizar o h√°bito.');
      }
    },
    [habits, setHabits, saveHabits],
  );

  // -----------------------------------------------------------
  // Excluir h√°bito
  // -----------------------------------------------------------
  const deleteHabit = useCallback(
    async (id: string) => {
      try {
        const filtered = habits.filter((h) => h.id !== id);
        setHabits(filtered);
        await saveHabits(filtered);
        // console.log('üóëÔ∏è H√°bito removido:', id);
      } catch (e) {
        console.error('Erro ao remover h√°bito:', e);
        Alert.alert('Erro', 'N√£o foi poss√≠vel remover o h√°bito.');
      }
    },
    [habits, setHabits, saveHabits],
  );

  // -----------------------------------------------------------
  // Concluir h√°bito ‚Äî c√°lculo de streak √† prova de fuso/hor√°rio
  // -----------------------------------------------------------
  const completeHabit = useCallback(
    async (id: string) => {
      try {
        const today = startOfDay(new Date());

        const updatedList = habits.map((h) => {
          if (h.id !== id) return h;

          const prevStreak = h.streak ?? 0;

          if (h.lastCompleted) {
            const last = startOfDay(new Date(h.lastCompleted));
            const diffDays = Math.floor((today.getTime() - last.getTime()) / MS_DAY);

            let nextStreak = prevStreak;
            if (diffDays === 0) {
              // J√° marcou hoje: mant√©m streak, s√≥ atualiza timestamp
              nextStreak = prevStreak > 0 ? prevStreak : 1;
            } else if (diffDays === 1) {
              nextStreak = prevStreak + 1;
            } else {
              // Perdeu dias no meio: reinicia
              nextStreak = 1;
            }

            return {
              ...h,
              lastCompleted: today.toISOString(),
              streak: nextStreak,
            };
          }

          // Primeiro check do h√°bito
          return {
            ...h,
            lastCompleted: today.toISOString(),
            streak: 1,
          };
        });

        setHabits(updatedList);
        await saveHabits(updatedList);
        // console.log('üî• H√°bito conclu√≠do:', id);
      } catch (e) {
        console.error('Erro ao completar h√°bito:', e);
        Alert.alert('Erro', 'N√£o foi poss√≠vel completar o h√°bito.');
      }
    },
    [habits, setHabits, saveHabits],
  );

  // -----------------------------------------------------------
  // Resetar streak
  // -----------------------------------------------------------
  const resetStreak = useCallback(
    async (id: string) => {
      const updated = habits.map((h) =>
        h.id === id ? { ...h, streak: 0, lastCompleted: undefined } : h,
      );
      setHabits(updated);
      await saveHabits(updated);
    },
    [habits, setHabits, saveHabits],
  );

  // -----------------------------------------------------------
  // Limpar tudo
  // -----------------------------------------------------------
  const clearHabits = useCallback(async () => {
    setHabits([]);
    await saveHabits([]);
  }, [setHabits, saveHabits]);

  return {
    habits,
    loading,
    addHabit,
    updateHabit,
    deleteHabit,
    completeHabit,
    resetStreak,
    clearHabits,
  };
}
